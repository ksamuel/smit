# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-23 06:07
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import django_extensions.db.fields
import uuid
import website.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(default=website.models.generate_setting_name, max_length=128, verbose_name='Nom de cette configuration')),
                ('active', models.BooleanField(default=True, verbose_name='Activer cette configuration')),
                ('sirene_ftp_ip_address', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4', verbose_name='Adresse IP du FTP SIRENE')),
                ('sirene_ftp_port', models.PositiveIntegerField(blank=True, default=21, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Port du FTP SIRENE')),
                ('sirene_ftp_username', models.CharField(blank=True, max_length=128, null=True, verbose_name='Login du FTP SIRENE')),
                ('sirene_ftp_password', models.CharField(blank=True, max_length=128, null=True, verbose_name='Mot de passe du FTP SIRENE')),
                ('sirene_csv_file_path', models.CharField(blank=True, default='VTM_ATTENDUS_PILOTAGE_V2.csv', max_length=512, null=True, verbose_name='Chemin du fichier CSV de SIRENE')),
                ('sirene_ftp_refresh_rate', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Nombre de secondes entre deux mises à jour des données SIRENE')),
                ('nh_ip_address', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4', verbose_name='Adresse IP du server HN')),
                ('nh_port', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Port du serveur HN')),
                ('nh_username', models.CharField(blank=True, max_length=128, null=True, verbose_name='Login du serveur NH')),
                ('nh_password', models.CharField(blank=True, max_length=128, null=True, verbose_name='Mot de passe du serveur NH')),
                ('nh_refresh_rate', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Nombre de secondes entre deux mises à jour des données HN')),
                ('red_dot_lat', models.FloatField(blank=True, default=50.9675, null=True, verbose_name='Latitude du point rouge')),
                ('red_dot_long', models.FloatField(blank=True, default=1.9, null=True, verbose_name='Longitude du point rouge')),
            ],
            options={
                'verbose_name': 'Configuration',
            },
        ),
    ]
